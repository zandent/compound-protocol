pragma solidity ^0.6.9;

import "./SafeMath.sol";

contract Timelock {
    using SafeMath for uint;

    event NewAdmin(address indexed newAdmin);
    event NewPendingAdmin(address indexed newPendingAdmin);
    event NewDelay(uint indexed newDelay);
    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint user_delay);
    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint user_delay);
    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint user_delay);

    
    struct LockedTx {
        address target;
        uint value;
        string signature;
        bytes data;
        uint user_delay;
        bool ready;
    }
    
    
    mapping (bytes32 => LockedTx) private queuedTx;

    uint public constant MINIMUM_DELAY = 0 days;
    uint public constant MAXIMUM_DELAY = 30 days;

    address public admin;
    address public pendingAdmin;
    uint public delay;

    
    //////////////////////////////////////////////////////////////////////////////////////////////////
    // GENERATED BY SIGNALSLOT PARSER
    
    // Original Code:
    // signal TimesUp;

    // TODO: Arguments should not be limited to one 32 byte value

    // Generated variables that represent the signal
	bytes32 private TimesUp_data;
	bytes32 private TimesUp_dataslot;
	uint private TimesUp_status;
    bytes32 private TimesUp_key;

    // Set the data to be emitted
	function set_TimesUp_data(bytes32  dataSet) private {
       TimesUp_data = dataSet;
    }

    // Get the argument count
	function get_TimesUp_is_fix() public pure returns (uint is_fix) {
       return 5 + 256*32;
    }

    // Get the signal key
	function get_TimesUp_key() public view returns (bytes32 key) {
       return TimesUp_key;
    }

    // Get the data slot
    function get_TimesUp_dataslot() public view returns (bytes32 dataslot) {
       return TimesUp_dataslot;
    }

    // signal TimesUp construction
    // This should be called once in the contract construction.
    // This parser should automatically call it.
    function TimesUp() private {
        TimesUp_key = keccak256("TimesUp()");
		assembly {
			sstore(TimesUp_status_slot, createsig(5, sload(TimesUp_key_slot)))
			sstore(TimesUp_dataslot_slot, TimesUp_data_slot)
		}
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////


    fallback() external payable { }

    function setDelay(uint delay_) public {
        require(msg.sender == address(this), "Timelock::setDelay: Call must come from Timelock.");
        require(delay_ >= MINIMUM_DELAY, "Timelock::setDelay: Delay must exceed minimum delay.");
        require(delay_ <= MAXIMUM_DELAY, "Timelock::setDelay: Delay must not exceed maximum delay.");
        delay = delay_;

        emit NewDelay(delay);
    }

    function acceptAdmin() public {
        require(msg.sender == pendingAdmin, "Timelock::acceptAdmin: Call must come from pendingAdmin.");
        admin = msg.sender;
        pendingAdmin = address(0);

        emit NewAdmin(admin);
    }

    function setPendingAdmin(address pendingAdmin_) public {
        require(msg.sender == address(this), "Timelock::setPendingAdmin: Call must come from Timelock.");
        pendingAdmin = pendingAdmin_;

        emit NewPendingAdmin(pendingAdmin);
    }

    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint user_delay) public returns (bytes32) {
        require(msg.sender == admin, "Timelock::queueTransaction: Call must come from admin.");

        require(user_delay >= delay, "Timelock::queueTransaction: Delay must exceed required delay.");

        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, user_delay));
        
        
        queuedTx[txHash] = LockedTx(target, value, signature, data, user_delay, true);

        
        //////////////////////////////////////////////////////////////////////////////////////////////////
        // GENERATED BY SIGNALSLOT PARSER
        
        // Original Code:
        // emitsig TimesUp(txHash).delay(user_delay)

        // Set the data field in the signal
        set_TimesUp_data(txHash);
        // Get the argument count
        uint this_emitsig_TimesUp_is_fix = get_TimesUp_is_fix();
        // Get the data slot
		bytes32 this_emitsig_TimesUp_dataslot = get_TimesUp_dataslot();
        // Get the signal key
		bytes32 this_emitsig_TimesUp_key = get_TimesUp_key();
        // Use assembly to emit the signal and queue up slot transactions
		assembly {
			mstore(0x40, emitsig(this_emitsig_TimesUp_key, user_delay, this_emitsig_TimesUp_dataslot, this_emitsig_TimesUp_is_fix))
	    }
        //////////////////////////////////////////////////////////////////////////////////////////////////


        return txHash;
    }

    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint user_delay) public {
        require(msg.sender == admin, "Timelock::cancelTransaction: Call must come from admin.");

        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, user_delay));
        queuedTx[txHash].ready=false;

        emit CancelTransaction(txHash, target, value, signature, data, user_delay);
    }

    
    //////////////////////////////////////////////////////////////////////////////////////////////////
    // GENERATED BY SIGNALSLOT PARSER

    // Original Code:
    // handler TxExecutor {...}

    // Generated variables that represent the slot
    uint private TxExecutor_status;
    bytes32 private TxExecutor_key;

    // Get the signal key
	function get_TxExecutor_key() public view returns (bytes32 key) {
       return TxExecutor_key;
    }

    // TxExecutor construction
    // Should be called once in the contract construction
    function TxExecutor() private {
        TxExecutor_key = keccak256("TxExecutor_func(bytes32)");
        assembly {
            sstore(TxExecutor_status_slot, createslot(1, 10, 30000, sload(TxExecutor_key_slot)))
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////

    // TxExecutor code to be executed
    // The slot is converted to a function that will be called in slot transactions.
    function TxExecutor_func(bytes32 txHash)  public  {
        
        
        require(queuedTx[txHash].ready, "Timelock::executeTransaction: Transaction hasn't been queued.");
        queuedTx[txHash].ready=false;
        bytes memory callData;

        if (bytes(queuedTx[txHash].signature).length == 0) {
            callData = queuedTx[txHash].data;
        } else {
            callData = abi.encodePacked(bytes4(keccak256(bytes(queuedTx[txHash].signature))), queuedTx[txHash].data);
        }

        
        (bool success, bytes memory returnData) = queuedTx[txHash].target.call.value(queuedTx[txHash].value)(callData);
        require(success, "Timelock::executeTransaction: Transaction execution reverted.");

        emit ExecuteTransaction(txHash, queuedTx[txHash].target, queuedTx[txHash].value, queuedTx[txHash].signature, queuedTx[txHash].data, queuedTx[txHash].user_delay);        
    }

    function getBlockTimestamp() internal view returns (uint) {
        
        return block.timestamp;
    }

    constructor(address admin_, uint delay_) public {
   TimesUp();
   TxExecutor();
        require(delay_ >= MINIMUM_DELAY, "Timelock::construct: Delay must exceed minimum delay.");
        require(delay_ <= MAXIMUM_DELAY, "Timelock::setDelay: Delay must not exceed maximum delay.");

        //////////////////////////////////////////////////////////////////////////////////////////////////
        // GENERATED BY SIGNALSLOT PARSER

        // Original Code:
        // TxExecutor.bind(this.TimesUp)

        // Convert to address
		address this_bindslot_address = address(this);
        // Get signal key from emitter contract
		bytes32 this_bindslot_TimesUp_key = keccak256("TimesUp()");
        // Get slot key from receiver contract
        bytes32 this_this_bindslot_TxExecutor_key = get_TxExecutor_key();
        // Use assembly to bind slot to signal
		assembly {
			mstore(0x40, bindslot(this_bindslot_address, this_bindslot_TimesUp_key, this_this_bindslot_TxExecutor_key))
	    }
        //////////////////////////////////////////////////////////////////////////////////////////////////

        admin = admin_;
        delay = delay_;
    }
}